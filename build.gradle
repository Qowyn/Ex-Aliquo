/*
 * Ex-Aliquo
 * Master build file
 * Based on Mantle's master build file
 * Authors: Qowyn
 */

buildscript {
    repositories {
        mavenCentral()
    mavenLocal()
        maven {
            name = 'ForgeFS'
            url = 'http://files.minecraftforge.net/maven'
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

configurations {
    shade
    compile.extendsFrom shade
}

repositories {
    mavenLocal()
	maven {
		name = "ic2"
		url = "http://maven.ic2.player.to/"
	}
    maven {
        name 'CB Maven FS'
        url "http://chickenbones.net/maven/"
    }
    maven {
         name "ProfMobius Maven FS"
         url "http://mobiusstrip.eu/maven"
    }
    maven {
        name 'ForgeFS'
        url 'http://files.minecraftforge.net/maven'
    }
    maven {
        name 'Drakon.io Arca'
        url "http://arca.drakon.io/"
    }
    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }
}

apply plugin: 'forge'
group = 'exaliquo'

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

dependencies {
    shade "io.drakon:Pulsar:${config.pulsar_version}"
    compile "exnihilo:Ex-Nihilo:${config.exnihilo_version}"
    compile "tconstruct:TConstruct:${config.minecraft_version}-${config.tconstruct_version}:deobf"
}

// sets version to the slimeKnights default version format
// Finds and sets version data
task buildInfo {
    def cmd = "git rev-parse --short HEAD"
    def proc = cmd.execute()
    proc.waitFor()
    if (proc.exitValue() == 0) {
        ext.revision = proc.text.trim()
    } else {
        ext.revision = "GITBORK"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "jenkins${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${config.mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${config.minecraft_version}-${artifact_version}"

minecraft {
    version = config.minecraft_version + "-" + config.forge_version
    runDir = 'run'
    replace '${version}', project.version
    srgExtra "PK: io/drakon/pulsar exaliquo/pulsar"
}


sourceSets {
    main {
        resources {
            srcDir 'resources'
        }
    }
}
processResources
{
    inputs.property "version", artifact_version
    inputs.property "MCversion", config.minecraft_version

        // replace stuff in text files, not binary ones.
    from(sourceSets.main.resources.srcDirs) {
        include '**/*.info'
                // replace version and MCVersion
        expand 'version':artifact_version,'MCversion':config.minecraft_version
    }
        
        // copy everything else, thats not text
    from(sourceSets.main.resources.srcDirs) {
        exclude '**/*.info'
    }
}

// because the normal output has been made to be obfuscated
task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives deobfJar
    archives sourcesJar
}

task("uploadJars", dependsOn:"build") {
    
    description = "uploads JARs"

    if (project.hasProperty("local_maven")) {
        apply plugin: 'maven'
            uploadArchives {
                repositories {
                    mavenDeployer {
                        repository(url: "file://${local_maven}")
                }
            }
        }
    }
}